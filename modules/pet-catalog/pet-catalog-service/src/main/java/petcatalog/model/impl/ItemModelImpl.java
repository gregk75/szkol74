/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package petcatalog.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import petcatalog.model.Item;
import petcatalog.model.ItemModel;
import petcatalog.model.ItemSoap;

/**
 * The base model implementation for the Item service. Represents a row in the &quot;PETS_ITEM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ItemImpl
 * @generated
 */
@JSON(strict = true)
public class ItemModelImpl extends BaseModelImpl<Item> implements ItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item model instance should use the <code>Item</code> interface instead.
	 */
	public static final String TABLE_NAME = "PETS_ITEM";

	public static final Object[][] TABLE_COLUMNS = {
		{"itemId", Types.BIGINT}, {"productId", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"imageUrl", Types.VARCHAR}, {"imageThumbUrl", Types.VARCHAR},
		{"price", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("itemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageThumbUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PETS_ITEM (itemId LONG not null primary key,productId VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(1200) null,imageUrl VARCHAR(75) null,imageThumbUrl VARCHAR(75) null,price DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table PETS_ITEM";

	public static final String ORDER_BY_JPQL = " ORDER BY item.itemId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY PETS_ITEM.itemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DESCRIPTION_COLUMN_BITMASK = 1L;

	public static final long NAME_COLUMN_BITMASK = 2L;

	public static final long ITEMID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Item toModel(ItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Item model = new ItemImpl();

		model.setItemId(soapModel.getItemId());
		model.setProductId(soapModel.getProductId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setImageUrl(soapModel.getImageUrl());
		model.setImageThumbUrl(soapModel.getImageThumbUrl());
		model.setPrice(soapModel.getPrice());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Item> toModels(ItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Item> models = new ArrayList<Item>(soapModels.length);

		for (ItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Item.class;
	}

	@Override
	public String getModelClassName() {
		return Item.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Item)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Item, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Item, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Item)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Item, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Item, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Item, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Item, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Item, Object>>();
		Map<String, BiConsumer<Item, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Item, ?>>();

		attributeGetterFunctions.put("itemId", Item::getItemId);
		attributeSetterBiConsumers.put(
			"itemId", (BiConsumer<Item, Long>)Item::setItemId);
		attributeGetterFunctions.put("productId", Item::getProductId);
		attributeSetterBiConsumers.put(
			"productId", (BiConsumer<Item, String>)Item::setProductId);
		attributeGetterFunctions.put("name", Item::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Item, String>)Item::setName);
		attributeGetterFunctions.put("description", Item::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Item, String>)Item::setDescription);
		attributeGetterFunctions.put("imageUrl", Item::getImageUrl);
		attributeSetterBiConsumers.put(
			"imageUrl", (BiConsumer<Item, String>)Item::setImageUrl);
		attributeGetterFunctions.put("imageThumbUrl", Item::getImageThumbUrl);
		attributeSetterBiConsumers.put(
			"imageThumbUrl", (BiConsumer<Item, String>)Item::setImageThumbUrl);
		attributeGetterFunctions.put("price", Item::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<Item, Double>)Item::setPrice);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	@JSON
	@Override
	public String getProductId() {
		if (_productId == null) {
			return "";
		}
		else {
			return _productId;
		}
	}

	@Override
	public void setProductId(String productId) {
		_productId = productId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_columnBitmask |= DESCRIPTION_COLUMN_BITMASK;

		if (_originalDescription == null) {
			_originalDescription = _description;
		}

		_description = description;
	}

	public String getOriginalDescription() {
		return GetterUtil.getString(_originalDescription);
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return "";
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public String getImageThumbUrl() {
		if (_imageThumbUrl == null) {
			return "";
		}
		else {
			return _imageThumbUrl;
		}
	}

	@Override
	public void setImageThumbUrl(String imageThumbUrl) {
		_imageThumbUrl = imageThumbUrl;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Item.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Item toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Item>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemImpl itemImpl = new ItemImpl();

		itemImpl.setItemId(getItemId());
		itemImpl.setProductId(getProductId());
		itemImpl.setName(getName());
		itemImpl.setDescription(getDescription());
		itemImpl.setImageUrl(getImageUrl());
		itemImpl.setImageThumbUrl(getImageThumbUrl());
		itemImpl.setPrice(getPrice());

		itemImpl.resetOriginalValues();

		return itemImpl;
	}

	@Override
	public int compareTo(Item item) {
		long primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Item)) {
			return false;
		}

		Item item = (Item)object;

		long primaryKey = item.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalName = _name;

		_originalDescription = _description;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Item> toCacheModel() {
		ItemCacheModel itemCacheModel = new ItemCacheModel();

		itemCacheModel.itemId = getItemId();

		itemCacheModel.productId = getProductId();

		String productId = itemCacheModel.productId;

		if ((productId != null) && (productId.length() == 0)) {
			itemCacheModel.productId = null;
		}

		itemCacheModel.name = getName();

		String name = itemCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			itemCacheModel.name = null;
		}

		itemCacheModel.description = getDescription();

		String description = itemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			itemCacheModel.description = null;
		}

		itemCacheModel.imageUrl = getImageUrl();

		String imageUrl = itemCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			itemCacheModel.imageUrl = null;
		}

		itemCacheModel.imageThumbUrl = getImageThumbUrl();

		String imageThumbUrl = itemCacheModel.imageThumbUrl;

		if ((imageThumbUrl != null) && (imageThumbUrl.length() == 0)) {
			itemCacheModel.imageThumbUrl = null;
		}

		itemCacheModel.price = getPrice();

		return itemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Item)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Item, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Item, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Item, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Item)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Item>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Item.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _itemId;
	private String _productId;
	private String _name;
	private String _originalName;
	private String _description;
	private String _originalDescription;
	private String _imageUrl;
	private String _imageThumbUrl;
	private double _price;
	private long _columnBitmask;
	private Item _escapedModel;

}